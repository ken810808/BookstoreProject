@model IEnumerable<BookStore_Web_.Models.Absence_Table>


<style type="text/css" media="screen">
    /*html {
        font-family: Century Gothic, Arial, Helvetica;
        font-size: 1em;
    }

    body {
        padding: 10px;
    }*/

    .mydiv {
        height: 30px;
        min-height: 30px;
        font-size: 1.4em;
        text-align: center;
    }

    #sb_hierarchy {
        position: relative;
        width: 700px;
        margin: 0 auto;
    }

    #sb_hierarchy_legend {
        height: 100px;
        min-height: 100px;
        font-size: 1.4em;
        text-align: center;
    }
</style>





<div class="mydiv">@Model.Select(n => n.Emp_Information.Emp_Name).FirstOrDefault()</div>
<div id="sb_hierarchy_legend">&nbsp;</div>
<div id="sb_hierarchy">&nbsp;</div>

<script type="text/javascript" src="http://hacks.michelepasin.org/media/hacks/subjectsviz/d3/d3.v2.min.js"></script>

<script type="text/javascript" charset="utf-8">
  var code_hierarchy_data = [
        "全類別假期(一年)",
        [136, 500],
        {
            "事假": [
              "事假(一年)",
              [14, null],
              {
                  "事假": [
                      "已請事假",
                      [
                          @{
                              List<int> holidays = new List<int>();
                              holidays.Add(new DateTime(2016, 1, 1).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 8).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 9).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 10).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 11).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 12).DayOfYear);
                              holidays.Add(new DateTime(2016, 2, 29).DayOfYear);
                              holidays.Add(new DateTime(2016, 4, 4).DayOfYear);
                              holidays.Add(new DateTime(2016, 4, 5).DayOfYear);
                              holidays.Add(new DateTime(2016, 6, 9).DayOfYear);
                              holidays.Add(new DateTime(2016, 6, 10).DayOfYear);
                              holidays.Add(new DateTime(2016, 9, 15).DayOfYear);
                              holidays.Add(new DateTime(2016, 9, 16).DayOfYear);
                              holidays.Add(new DateTime(2016, 10, 10).DayOfYear);
                              for (int i = 1, max = new DateTime(2016, 12, 31).DayOfYear; i <= max; i++)
                              {
                                  if (i % 7 == 2 || i % 7 == 3)
                                  {
                                      holidays.Add(i);
                                  }
                              }

                              TimeSpan t = new TimeSpan();
                              double t1 = 0.0;
                              int notWorkingDay = 0;

                              foreach (var item in Model.Where(n => n.Absence_ID == 2 && n.Check_ID==2))
                              {
                                  for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                                  {
                                      foreach (var holiday in holidays)
                                      {
                                          if (holiday.CompareTo(i) == 0)
                                          {
                                              notWorkingDay += 1;
                                          }
                                      }
                                  }

                                  t = item.EndDate - item.StartDate;
                                  t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;                                
                              }
                           }
                          @Math.Round(t1,1)
                          , null],
                          {}]
              }],
            "病假": [
                "病假(一年)",
                [30, null],
                {
                    "病假": [
                    "已請病假",
                    [ @{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 1 && n.Check_ID == 2 ))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                        
                        }
                        }

                        @Math.Round(t1,1)
                        , null],
                        {}]
                }],
            "喪假": [
              "喪假(一年)",
              [8, null],
              {
                  "喪假": [
                  "已請喪假",
                  [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 3 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;

                        }
                           }

                        @Math.Round(t1,1), null],
                      {}]
              }],
            "婚假": [
                "婚假(一年)",
                [8, null],
                {
                    "婚假": [
                    "已請婚假",
                    [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 12 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                              }
                           }

                        @Math.Round(t1,1), null],
                        {}]
                }],
            "公假": [
              "公假(一年)",
              [14, null],
              {
                  "公假": [
                  "已請公假",
                  [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 11 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                              }
                           }

                        @Math.Round(t1,1), null],
                      {}]
              }],
            "產假": [
                "產假(一年)",
                [56, null],
                {
                    "產假": [
                    "已請產假",
                    [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 4 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                              }
                           }

                        @Math.Round(t1,1), null],
                        {}]
                }],
            "育嬰假": [
              "育嬰假(一年)",
              [0, null],
              {
                  "育嬰假": [
                  "已請育嬰假",
                  [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 5 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                              }
                           }

                        @Math.Round(t1,1), null],
                      {}]
              }],
            "特休": [
                "特休(一年)",
                [7, null],
                {
                    "特休": [
                    "已請特休",
                    [@{
                        t = new TimeSpan();
                        t1 = 0.0;
                        notWorkingDay = 0;

                        foreach (var item in Model.Where(n => n.Absence_ID == 13 && n.Check_ID == 2))
                        {
                            for (int i = item.StartDate.DayOfYear, max = item.EndDate.DayOfYear; i <= max; i++)
                            {
                                foreach (var holiday in holidays)
                                {
                                    if (holiday.CompareTo(i) == 0)
                                    {
                                        notWorkingDay += 1;
                                    }
                                }
                            }

                            t = item.EndDate - item.StartDate;
                            t1 = t1 + (t.TotalHours - notWorkingDay * 24.0 - (item.EndDate.DayOfYear - item.StartDate.DayOfYear - notWorkingDay) * 15) / 9;
                              }
                           }

                        @Math.Round(t1,1), null],
                    {}]
                }]
        }];

    // code from http://bl.ocks.org/adewes/4710330/94a7c0aeb6f09d681dbfdd0e5150578e4935c6ae

    function init_code_hierarchy_plot(element_id, data, count_function, color_function, title_function, legend_function) {
        var plot = document.getElementById(element_id);

        while (plot.hasChildNodes()) {
            plot.removeChild(plot.firstChild);
        }

        var width = plot.offsetWidth;
        var height = width -190;
        var x_margin = 40;
        var y_margin = 40;

        var max_depth = 3; // default: 3 [PS: not referenced anywhere else in code!]

        var data_slices = [];
        var max_level = 3;  // default: 4

        var svg = d3.select("#" + element_id).append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height * .52 + ")");

        function process_data(data, level, start_deg, stop_deg) {
            var name = data[0];
            var total = count_function(data);
            var children = data[2];
            var current_deg = start_deg;
            if (level > max_level) {
                return;
            }
            if (start_deg == stop_deg) {
                return;
            }
            data_slices.push([start_deg, stop_deg, name, level, data[1]]);
            for (var key in children) {
                child = children[key];
                var inc_deg = (stop_deg - start_deg) / total * count_function(child);
                var child_start_deg = current_deg;
                current_deg += inc_deg;
                var child_stop_deg = current_deg;
                var span_deg = child_stop_deg - child_start_deg;
                process_data(child, level + 1, child_start_deg, child_stop_deg);
            }
        }

        process_data(data, 0, 0, 360.0 / 180.0 * Math.PI);

        var ref = data_slices[0];
        var next_ref = ref;
        var last_refs = [];

        var thickness = width / 2.0 / (max_level + 2) * 1.1;   // originally: max_level+2

        var arc = d3.svg.arc()
        .startAngle(function (d) { if (d[3] == 0) { return d[0]; } return d[0] + 0.01; })
        .endAngle(function (d) { if (d[3] == 0) { return d[1]; } return d[1] - 0.01; })
        .innerRadius(function (d) { return 1.1 * d[3] * thickness; })
        .outerRadius(function (d) { return (1.1 * d[3] + 1) * thickness; });

        var slices = svg.selectAll(".form")
            .data(function (d) { return data_slices; })
            .enter()
            .append("g");
        slices.append("path")
        .attr("d", arc)
        .attr("id", function (d, i) { return element_id + i; })
        .style("fill", function (d) { return color_function(d); })
        .attr("class", "form");
        slices.on("click", animate);

        if (title_function != undefined) {
            slices.append("svg:title")
                  .text(title_function);
        }
        if (legend_function != undefined) {
            slices.on("mouseover", update_legend)
                  .on("mouseout", remove_legend);
            var legend = d3.select("#" + element_id + "_legend")

            function update_legend(d) {
                legend.html(legend_function(d));
                legend.transition().duration(200).style("opacity", "1");
            }

            function remove_legend(d) {
                legend.transition().duration(1000).style("opacity", "0");
            }
        }
        function get_start_angle(d, ref) {
            if (ref) {
                var ref_span = ref[1] - ref[0];
                return (d[0] - ref[0]) / ref_span * Math.PI * 2.0
            }
            else {
                return d[0];
            }
        }

        function get_stop_angle(d, ref) {
            if (ref) {
                var ref_span = ref[1] - ref[0];
                return (d[1] - ref[0]) / ref_span * Math.PI * 2.0
            }
            else {
                return d[0];
            }
        }

        function get_level(d, ref) {
            if (ref) {
                return d[3] - ref[3];
            }
            else {
                return d[3];
            }
        }

        function rebaseTween(new_ref) {
            return function (d) {
                var level = d3.interpolate(get_level(d, ref), get_level(d, new_ref));
                var start_deg = d3.interpolate(get_start_angle(d, ref), get_start_angle(d, new_ref));
                var stop_deg = d3.interpolate(get_stop_angle(d, ref), get_stop_angle(d, new_ref));
                var opacity = d3.interpolate(100, 0);
                return function (t) {
                    return arc([start_deg(t), stop_deg(t), d[2], level(t)]);
                }
            }
        }

        var animating = false;

        function animate(d) {
            if (animating) {
                return;
            }
            animating = true;
            var revert = false;
            var new_ref;
            if (d == ref && last_refs.length > 0) {
                revert = true;
                last_ref = last_refs.pop();
            }
            if (revert) {
                d = last_ref;
                new_ref = ref;
                svg.selectAll(".form")
                .filter(
                    function (b) {
                        if (b[0] >= last_ref[0] && Math.round(b[1], 15) <= Math.round(last_ref[1], 15) && b[3] >= last_ref[3]) {
                            return true;
                        }
                        return false;
                    }
                )
                .transition().duration(1000).style("opacity", "1").attr("pointer-events", "all");
            }
            else {
                new_ref = d;
                svg.selectAll(".form")
                .filter(
                    function (b) {
                        if (d[3] != 0) {
                            if (Math.round(b[0], 1) <= Math.round(d[0], 1) || Math.round(b[1], 1) >= Math.round(d[1], 1) || Math.round(b[3], 15) < Math.round(d[3], 15)) {
                                return true;
                            }
                        }
                        return false;
                    }
                )
                .transition().duration(1000).style("opacity", "0").attr("pointer-events", "none");
            }
            svg.selectAll(".form")
            .filter(
                function (b) {
                    if (b[0] >= new_ref[0] && b[1] <= new_ref[1] && b[3] >= new_ref[3]) {
                        return true;
                    }
                    return false;
                }
            )
            .transition().duration(1000).attrTween("d", rebaseTween(d));
            setTimeout(function () {
                animating = false;
                if (!revert) {
                    last_refs.push(ref);
                    ref = d;
                }
                else {
                    ref = d;
                }
            }, 1000);
        };

    }

    function init_plots() {

        function count_function(d) {
            return d[1][0];
        }

        function label_function(d) {
            return d[2] + ": " + d[4][0] + " 天";
        }

        function legend_function(d) {
            return "<h2>" + d[2] + "&nbsp;</h2><p>" + d[4][0] + " 天</p>"
        }

        var color = d3.scale.category20c();

        function color_function(d) {
            return color(d[2]);
        }
        d3.select(self.frameElement).style("height", "800px");
        init_code_hierarchy_plot("sb_hierarchy", code_hierarchy_data, count_function, color_function, label_function, legend_function);
    }

    window.onload = init_plots;
    window.onresize = init_plots;
    init_plots();


</script>

